x-auth-env: &auth-env
    env_file:
      - ${shrooAuthDir}/.auth.env
      
services:
  auth-server:
    image: ghcr.io/goauthentik/server:2024.8.2
    container_name: auther
    command: server
    <<: *auth-env
    networks:
      - AuthBackNet
      - AuthFrontNet
    volumes:
      - ${shrooAuthDir}/media:/media
      - ${shrooAuthDir}/custom-templates:/templates
    ports:
      - "9000:9000"
      #- "9443:9443"
    restart: unless-stopped
    depends_on:
      - auth-pg
      - auth-redis
      
  auth-worker:
    image: ghcr.io/goauthentik/server:2024.8.2
    container_name: auth-worker
    command: worker
    <<: *auth-env
    networks:
      - AuthBackNet
    volumes:
      - ${shrooAuthDir}/media:/media
      - ${shrooAuthDir}/certs:/certs
      - ${shrooAuthDir}/custom-templates:/templates
    depends_on:
      - auth-pg
      - auth-redis
      
  auth-pg:
    image: docker.io/library/postgres:16-alpine
    container_name: auth-pg
    env_file:
      - ${shrooAuthDir}/.auth-pg.env
    networks:
      - AuthBackNet
    volumes:
      - AuthDB:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s

  auth-redis:
    image: docker.io/library/redis:alpine
    container_name: auth-redis
    command: --save 60 1 --loglevel warning
    networks:
      - AuthBackNet
    volumes:
      - AuthRedis:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s

networks:
  AuthFrontNet:
    name: AuthFrontNet
    driver: bridge
    internal: false
  AuthBackNet:
    name: AuthBackNet
    driver: bridge
    internal: true

volumes:
  AuthDB:
    driver: local
    driver_opts:
      type: none
      device: ${shrooAuthDB}
      o: bind
  AuthRedis:
    driver: local
